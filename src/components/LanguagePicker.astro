---
import IconLanguage from './icons/IconLanguage.astro';
---

<div class="relative">
  <button
    id="language-picker-button"
    class="focus-visible:shadow-card-ring inline-flex cursor-pointer items-center gap-1.5 rounded-full border-0 bg-transparent px-4 py-2 font-bold text-gray-900 outline-none hover:bg-gray-100 dark:text-blue-200 dark:hover:bg-slate-700/50 dark:hover:text-blue-100"
    aria-label="Change language"
  >
    <div class="w-4 h-4 flex-shrink-0">
      <IconLanguage />
    </div>
    <span id="current-language-text">Norsk</span>
  </button>
  
  <div
    id="language-dropdown"
    class="absolute bottom-full left-0 mb-2 hidden w-32 rounded-lg border bg-white shadow-lg dark:border-slate-700 dark:bg-gray-900"
    role="menu"
  >
    <button
      id="language-no"
      class="w-full px-4 py-2 text-left text-sm text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-slate-700 rounded-t-lg transition-colors"
      role="menuitem"
      data-lang="no"
    >
      Norsk
    </button>
    <button
      id="language-en"
      class="w-full px-4 py-2 text-left text-sm text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-slate-700 rounded-b-lg transition-colors"
      role="menuitem"
      data-lang="en"
    >
      English
    </button>
  </div>
</div>

<script is:inline>
  // Language utilities (inline version)
  const languages = {
    no: 'Norsk',
    en: 'English'
  };

  const defaultLanguage = 'no';

  function getCurrentLanguage() {
    // First check URL params
    const urlParams = new URLSearchParams(window.location.search);
    const langParam = urlParams.get('lang');
    if (langParam && langParam in languages) {
      return langParam;
    }
    
    // Then check localStorage
    const storedLang = localStorage.getItem('language');
    if (storedLang && storedLang in languages) {
      return storedLang;
    }
    
    return defaultLanguage;
  }

  function setLanguage(lang) {
    localStorage.setItem('language', lang);
    
    // Update URL without page reload
    const url = new URL(window.location.href);
    url.searchParams.set('lang', lang);
    window.history.replaceState({}, '', url.toString());
  }

  const languageButton = document.getElementById('language-picker-button');
  const languageDropdown = document.getElementById('language-dropdown');
  const currentLanguageText = document.getElementById('current-language-text');
  const languageButtons = document.querySelectorAll('[data-lang]');

  // Update the displayed language text
  function updateLanguageDisplay() {
    const currentLang = getCurrentLanguage();
    const langName = languages[currentLang];
    if (currentLanguageText) {
      currentLanguageText.textContent = langName;
    }
  }

  // Toggle dropdown visibility
  function toggleDropdown() {
    if (languageDropdown) {
      languageDropdown.classList.toggle('hidden');
    }
  }

  // Close dropdown when clicking outside
  function closeDropdown() {
    if (languageDropdown) {
      languageDropdown.classList.add('hidden');
    }
  }

  // Handle language selection
  function selectLanguage(lang) {
    if (lang) {
      setLanguage(lang);
      updateLanguageDisplay();
      closeDropdown();
      
      // Reload the page to apply new language
      window.location.reload();
    }
  }

  // Event listeners
  if (languageButton) {
    languageButton.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
  }

  // Close dropdown when clicking outside
  document.addEventListener('click', () => {
    closeDropdown();
  });

  // Prevent dropdown from closing when clicking inside it
  if (languageDropdown) {
    languageDropdown.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  }

  // Language selection buttons
  languageButtons.forEach(button => {
    button.addEventListener('click', () => {
      const lang = button.getAttribute('data-lang');
      selectLanguage(lang);
    });
  });

  // Initialize display on page load
  updateLanguageDisplay();
</script>
